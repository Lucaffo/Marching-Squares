#pragma kernel March

struct VoxelData
{
    float3 position;
    float isoValue;
};

// Append buffers for each data types
RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<int> triangles;
RWStructuredBuffer<float3> uvs;

RWStructuredBuffer<VoxelData> voxels;

int cells;
float isoLevel;
bool useInterpolation;
bool useUVMapping;

// Caching the uvs up and right directions
float3 uvUp;
float3 uvRight;

float3 lerp(float3 a, float3 b, float w)
{
    return a + w*(b-a);
}

void AddTriangle(int triangleIndex, int verticesIndex, inout float3 a, inout float3 b, inout float3 c)
{
    // Set the triangle vertices
    vertices[verticesIndex] = a;
    vertices[verticesIndex + 1] = b;
    vertices[verticesIndex + 2] = c;

    // Set the triangles indexes
    triangles[triangleIndex] = verticesIndex;
    triangles[triangleIndex + 1] = verticesIndex + 1; 
    triangles[triangleIndex + 2] = verticesIndex + 2;
    
    if(useUVMapping)
    {
        uvs[verticesIndex] = uvUp * a.x + uvRight * a.y;
        uvs[verticesIndex + 1] = uvUp * b.x + uvRight * b.y;
        uvs[verticesIndex + 2] = uvUp * c.x + uvRight * c.y;
    }
}

void AddQuad(int triangleIndex, int verticesIndex, inout float3 a, inout float3 b, inout float3 c, inout float3 d)
{
    // Set the triangle vertices
    vertices[verticesIndex] = a;
    vertices[verticesIndex + 1] = b;
    vertices[verticesIndex + 2] = c;
    vertices[verticesIndex + 3] = d;

    // Set the triangles indexes
    triangles[triangleIndex] = verticesIndex;
    triangles[triangleIndex + 1] = verticesIndex + 1; 
    triangles[triangleIndex + 2] = verticesIndex + 2;

    triangles[triangleIndex + 3] = verticesIndex;
    triangles[triangleIndex + 4] = verticesIndex + 2; 
    triangles[triangleIndex + 5] = verticesIndex + 3;

    if(useUVMapping)
    {
        uvs[verticesIndex] = uvUp * a.x + uvRight * a.y;
        uvs[verticesIndex + 1] = uvUp * b.x + uvRight * b.y;
        uvs[verticesIndex + 2] = uvUp * c.x + uvRight * c.y;
        uvs[verticesIndex + 3] = uvUp * d.x + uvRight * d.y;
    }
}

void AddPentagon(int triangleIndex, int verticesIndex, inout float3 a, inout float3 b, inout float3 c, inout float3 d, inout float3 e)
{
    // Set the triangle vertices
    vertices[verticesIndex] = a;
    vertices[verticesIndex + 1] = b;
    vertices[verticesIndex + 2] = c;
    vertices[verticesIndex + 3] = d;
    vertices[verticesIndex + 4] = e;

    // Set the triangles indexes
    triangles[triangleIndex] = verticesIndex;
    triangles[triangleIndex + 1] = verticesIndex + 1; 
    triangles[triangleIndex + 2] = verticesIndex + 2;

    triangles[triangleIndex + 3] = verticesIndex;
    triangles[triangleIndex + 4] = verticesIndex + 2; 
    triangles[triangleIndex + 5] = verticesIndex + 3;

    triangles[triangleIndex + 6] = verticesIndex;
    triangles[triangleIndex + 7] = verticesIndex + 3; 
    triangles[triangleIndex + 8] = verticesIndex + 4;
    
    if(useUVMapping)
    {
        uvs[verticesIndex] = uvUp * a.x + uvRight * a.y;
        uvs[verticesIndex + 1] = uvUp * b.x + uvRight * b.y;
        uvs[verticesIndex + 2] = uvUp * c.x + uvRight * c.y;
        uvs[verticesIndex + 3] = uvUp * d.x + uvRight * d.y;
        uvs[verticesIndex + 4] = uvUp * e.x + uvRight * e.y;
    }
}

void AddDoubleTriangles(int triangleIndex, int verticesIndex, inout float3 a, inout float3 b, inout float3 c, inout float3 a1, inout float3 b1, inout float3 c1)
{
    // Set the triangle vertices
    vertices[verticesIndex] = a;
    vertices[verticesIndex + 1] = b;
    vertices[verticesIndex + 2] = c;
    vertices[verticesIndex + 3] = a1;
    vertices[verticesIndex + 4] = b1;
    vertices[verticesIndex + 5] = c1;

    // Set the triangles indexes
    triangles[triangleIndex] = verticesIndex;
    triangles[triangleIndex + 1] = verticesIndex + 1; 
    triangles[triangleIndex + 2] = verticesIndex + 2;

    // Set the triangles indexes
    triangles[triangleIndex + 3] = verticesIndex + 3;
    triangles[triangleIndex + 4] = verticesIndex + 4; 
    triangles[triangleIndex + 5] = verticesIndex + 5;
    
    if(useUVMapping)
    {
        uvs[verticesIndex] = uvUp * a.x + uvRight * a.y;
        uvs[verticesIndex + 1] = uvUp * b.x + uvRight * b.y;
        uvs[verticesIndex + 2] = uvUp * c.x + uvRight * c.y;
        uvs[verticesIndex + 3] = uvUp * a1.x + uvRight * a1.y;
        uvs[verticesIndex + 4] = uvUp * b1.x + uvRight * b1.y;
        uvs[verticesIndex + 5] = uvUp * c1.x + uvRight * c1.y;
    }
}

[numthreads(128, 1, 1)]
void March (int3 id : SV_DispatchThreadID)
{   
    if (id.x > cells * cells + cells - 2)
    {
        return;
    }

    // Caching up the up and right uv directions
    uvUp = float3(0, 1, 0);
    uvRight = float3(1, 0, 0);

    // Voxel index
    int voxelIndex = id.x;

    // Cell corners
    VoxelData a = voxels[voxelIndex];
    VoxelData b = voxels[voxelIndex + 1];
    VoxelData c = voxels[voxelIndex + cells + 1];
    VoxelData d = voxels[voxelIndex + cells + 2];

    // Transform the index into the triangle index
    int triangleIndex = voxelIndex * 9;
    int verticesIndex = voxelIndex * 6;

    // Calculate unique index for each cube configuration.
    // There are 16 possible values
    int cellType = 0; 
    if (a.isoValue > isoLevel) cellType |= 1;
    if (b.isoValue > isoLevel) cellType |= 2;
    if (c.isoValue > isoLevel) cellType |= 4;
    if (d.isoValue > isoLevel) cellType |= 8;

    // Instead of top you lerp between A and B to get the position.
    // Instead of right you lerp between B and C, etc.
    // 
    //          top
    //       C-------D
    //  left |       |  right
    //       |       |
    //       A-------B
    //         bottom

    // Interpolation part
    float t_top;
    float t_right;
    float t_bottom;
    float t_left;

    if(useInterpolation)
    {
        t_top = (isoLevel - c.isoValue) / (d.isoValue - c.isoValue);
        t_right = (isoLevel - d.isoValue) / (b.isoValue - d.isoValue);
        t_bottom = (isoLevel - b.isoValue) / (a.isoValue - b.isoValue);
        t_left = (isoLevel - a.isoValue) / (c.isoValue - a.isoValue);
    }
    else
    {
        // Interpolation is for edge vertex
        t_top = 0.5;
        t_right = 0.5;
        t_bottom = 0.5;
        t_left = 0.5;
    }

    float3 top = lerp(c.position, d.position, t_top); 
    float3 right = lerp(d.position, b.position, t_right);
    float3 bottom = lerp(b.position, a.position, t_bottom);
    float3 left = lerp(a.position, c.position, t_left);

    switch(cellType)
    {
        case 0:
            return;
        case 1:
            AddTriangle(triangleIndex, verticesIndex, a.position, left, bottom);
            return;
        case 2:
            AddTriangle(triangleIndex, verticesIndex, b.position, bottom, right);
            return;
        case 4:
            AddTriangle(triangleIndex, verticesIndex, c.position, top, left);
            return;
        case 8:
            AddTriangle(triangleIndex, verticesIndex, d.position, right, top);
            return;
        case 3:
            AddQuad(triangleIndex, verticesIndex, a.position, left, right, b.position);
            return;
        case 5:
            AddQuad(triangleIndex, verticesIndex, a.position, c.position, top, bottom);
            return;
        case 10:
            AddQuad(triangleIndex, verticesIndex, bottom, top, d.position, b.position);
            return;
        case 12:
            AddQuad(triangleIndex, verticesIndex, left, c.position, d.position, right);
            return;
        case 15:
            AddQuad(triangleIndex, verticesIndex, a.position, c.position, d.position, b.position);
            return;
        case 7:
            AddPentagon(triangleIndex, verticesIndex, a.position, c.position, top, right, b.position);
            return;
        case 11:
            AddPentagon(triangleIndex, verticesIndex, b.position, a.position, left, top, d.position);
            return;
        case 13:
            AddPentagon(triangleIndex, verticesIndex, c.position, d.position, right, bottom, a.position);
            return;
        case 14:
            AddPentagon(triangleIndex, verticesIndex, d.position, b.position, bottom, left, c.position);
            return;
        case 6:
            AddDoubleTriangles(triangleIndex, verticesIndex, b.position, bottom, right, c.position, top, left);
            return;
        case 9:
            AddDoubleTriangles(triangleIndex, verticesIndex,a.position, left, bottom, d.position, right, top);
            return;
        default:
            return;
    }
}